#!/usr/bin/awk -f
BEGIN {
  OFS = "\t"
  FS = " "
}
function file(h, filename, command) {
  if (md5[h]) {
    print "file", h, "rpt", filename
  } else {
    command = "git cat-file -p " h " | md5sum -"
    FS = " "
    command | getline
    md5hash = $1
    md5[h] = 1 # treat it like a set of seen hashes
    close(command)
    command = "git cat-file -p " h " | file -"
    command | getline
    gsub(/^.dev.stdin: /,"")
    fileoutp = $0
    close(command)
    print "file", h, md5hash, filename, fileoutp
  }
}
function tree(id, path, command) {
  print "tree", id, path
  command = "git cat-file -p " id
  FS = "\t"
  while (command | getline > 0) {
    split($1, arr, " ")
    fn = $2 # filename
    t = arr[2] # type
    h = arr[3] # git hash
    if (t == "blob") { # file
      file(h, path ? path "/" fn : fn)
      FS = "\t"
    } else if (t == "tree") {
      print "tree", fn
      tree(h, path ? path "/" fn : fn)
      FS = "\t"
    }
  }
  print "endtree", id, path
  close(command)
  FS = " "
}
{
  inithash=$1
  label=$2 # tag or branch
  matched=0
}
/refs\/tags\//  { 
  matched=1
  print "tag", label
}
/refs\/heads\// { 
  gsub(/refs\/heads\//, "", label)
  matched=1
  print "branch", label
}
matched {
  rootcommit[inithash] = 1
  treecmd = "git cat-file -p " inithash
  while ((treecmd | getline) > 0) {
    if ($1 == "tree") { tree($2) }
    FS = " "
  }
  close(treecmd)
}
END {
  system("git log | grep '^commit' | sed 's/ /\\t/'")
}
